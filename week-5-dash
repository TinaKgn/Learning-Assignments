#!/usr/bin/env python
# coding: utf-8

# In[ ]:

import dash
import more_itertools
from dash import dcc, html
from dash.dependencies import Input, Output
import pandas as pd
import plotly.graph_objs as go
import plotly.express as px

# Load the data using pandas
data = pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/historical_automobile_sales.csv')

# Initialize the Dash app
app = dash.Dash(__name__)

# TASK 2.1: Add title to the dashboard
app.title = "Automobile Statistics Dashboard"

# Create the layout of the app
app.layout = html.Div([
    html.H1("Automobile Sales Statistics Dashboard", style={'textAlign': 'center', 'color': '#503D36', 'fontSize': 24}),
    # TASK 2.2: Add two dropdown menus
    html.Div([
        html.Label("Select Statistics:"),
        dcc.Dropdown(
            id='dropdown-statistics',
            options=[
                {'label': "Yearly Statistics", 'value': 'Yearly Statistics'},
                {'label': "Recession Period Statistics", 'value': 'Recession Period Statistics'}
            ],
            value="Yearly Statistics",
            placeholder='Select a report type',
            style={'textAlign': 'center', 'width': '80%', 'padding': '3', 'fontSize': '20'}
        ),
        dcc.Dropdown(
            id='select-year',
            options=[{'label': str(year), 'value': year} for year in range(1980, 2024)],
            value=1980,
            placeholder='Select a year',
            style={'textAlign': 'center', 'width': '80%', 'padding': '3', 'fontSize': '20'}
        )
    ]),
   
    # TASK 2.3: Add a division for output display
    html.Div(id='output-container', className='chart-grid', style={'display': 'flex'}),
])

# TASK 2.4: Creating Callbacks
@app.callback(
    Output(component_id='output-container', component_property='children'),
    [Input(component_id='select-year', component_property='value'),
     Input(component_id='dropdown-statistics', component_property='value')]
)
def update_recession_output(selected_year, selected_statistics):
    if selected_statistics == 'Recession Period Statistics':
        recession_data = data[data['Recession'] == 1]

        # Plot 1: Automobile sales fluctuate over Recession Period (year wise) using line chart
        yearly_rec = recession_data.groupby('Year')['Automobile_Sales'].mean().reset_index()
        R_chart1 = dcc.Graph(
            figure=px.line(
                yearly_rec, 
                x='Year',
                y='Automobile_Sales',
                title="Automobile Sales over Recession Period (Year-wise)"
            )
        )

        # Plot 2: Calculate the average number of vehicles sold by vehicle type and represent as a Bar chart
        vehicle_sales_by_type = recession_data.groupby('Vehicle_Type')['Automobile_Sales'].mean().reset_index()
        R_chart2 = dcc.Graph(
            figure=px.bar(
                vehicle_sales_by_type, 
                x='Vehicle_Type',
                y='Automobile_Sales',
                title="Average Vehicle Sales by Vehicle Type"
            )
        )

        # Plot 3: Pie chart for total expenditure share by vehicle type during recessions
        exp_rec = recession_data.groupby('Vehicle_Type')['Advertising_Expenditure'].sum().reset_index()
        R_chart3 = dcc.Graph(
            figure=px.pie(
                exp_rec,
                values='Advertising_Expenditure',
                names='Vehicle_Type',
                title="Total Expenditure Share by Vehicle Type during Recessions"
            )
        )

        # Plot 4: Develop a Bar chart for the effect of unemployment rate on vehicle type and sales
        unemployment_sales = recession_data.groupby('Vehicle_Type')['unemployment_rate'].mean().reset_index()
        R_chart4 = dcc.Graph(
            figure=px.bar(
                unemployment_sales, 
                x='Vehicle_Type',
                y='unemployment_rate',
                title="Effect of Unemployment Rate on Vehicle Type and Sales"
            )
        )

        return [
            html.Div(
                className='chart-item', 
                children=[
                    html.Div(children=R_chart1),
                    html.Div(children=R_chart2)
                ],
                style={'width': '50%', 'display': 'inline-block'}
            ),
            html.Div(
                className='chart-item', 
                children=[
                    html.Div(children=R_chart3),
                    html.Div(children=R_chart4)
                ],
                style={'width': '50%', 'display': 'inline-block'}
            )
        ]
    
    elif selected_statistics == 'Yearly Statistics':
        yearly_data = data[data['Year'] == selected_year]
        
        # Plot 1: Yearly Automobile sales using line chart for the whole period
        yas = yearly_data.groupby('Year')['Automobile_Sales'].mean().reset_index()
        Y_chart1 = dcc.Graph(figure=px.line(
            yas, x='Year', y='Automobile_Sales', title='Yearly Automobile Sales for the whole period'))

        # Plot 2: Total Monthly Automobile sales using line chart
        Y_chart2 = dcc.Graph(figure=px.line(
            yearly_data, x='Month', y='Automobile_Sales', title='Total Monthly Automobile Sales for {}'.format(selected_year)))

        # Plot 3: Bar chart for average number of vehicles sold during the given year
        avr_vdata = yearly_data.groupby('Vehicle_Type')['Automobile_Sales'].mean().reset_index()
        Y_chart3 = dcc.Graph(figure=px.bar(
            avr_vdata, x='Vehicle_Type', y='Automobile_Sales', title='Average Vehicles Sold by Vehicle Type in the year {}'.format(selected_year)))

        # Plot 4: Total Advertisement Expenditure for each vehicle using pie chart
        exp_data = yearly_data.groupby('Vehicle_Type')['Advertising_Expenditure'].sum().reset_index()
        Y_chart4 = dcc.Graph(figure=px.pie(
            exp_data, values='Advertising_Expenditure', names='Vehicle_Type', title='Total Advertisement Expenditure for each vehicle in {}'.format(selected_year)))

        return [
            html.Div(className='chart-item', children=[
                html.Div(children=Y_chart1),
                html.Div(children=Y_chart2)
            ], style={'display': 'flex'}),
            html.Div(className='chart-item', children=[
                html.Div(children=Y_chart3),
                html.Div(children=Y_chart4)
            ], style={'display': 'flex'})
        ]
    else:
        return None

# Run the Dash app
if __name__ == '__main__':
    app.run_server(debug=True)
